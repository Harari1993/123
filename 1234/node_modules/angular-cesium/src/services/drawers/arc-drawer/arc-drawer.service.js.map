{"version":3,"file":"arc-drawer.service.js","sourceRoot":"","sources":["arc-drawer.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleDrawerService } from '../simple-drawer/simple-drawer.service';\ndeclare var Cesium;\nimport { Injectable } from '@angular/core';\nimport { CesiumService } from '../../cesium/cesium.service';\n\n/**\n  +  This drawer is responsible for drawing an arc over the Cesium map.\n  +  This implementation uses simple PolylineGeometry and Primitive parameters.\n  +  This doesn't allow us to change the position, color, etc.. of the arc but show only.\n  */\n\n\nexport class ArcDrawerService extends SimpleDrawerService {\n\tconstructor(cesiumService: CesiumService) {\n\t\tsuper(Cesium.PrimitiveCollection, cesiumService);\n\t}\n\n\tadd(cesiumProps: any) {\n\t\tconst arcPositions = this.generatePositions(cesiumProps);\n\t\tconst colorMaterial = Cesium.Material.fromType('Color');\n\t\tcolorMaterial.uniforms.color = cesiumProps.color || Cesium.Color.WHITE;\n\t\treturn super.add(new Cesium.Primitive({\n\t\t\tgeometryInstances: new Cesium.GeometryInstance({\n\t\t\t\tgeometry: new Cesium.PolylineGeometry({\n\t\t\t\t\tpositions: arcPositions\n\t\t\t\t})\n\t\t\t}),\n\t\t\tappearance: new Cesium.PolylineMaterialAppearance({\n\t\t\t\tmaterial: colorMaterial\n\t\t\t})\n\t\t}));\n\t}\n\n\tprivate generatePositions(cesiumProps: any): Array<any> {\n\t\tconst arcPositions = [];\n\t\tconst defaultGranularity = 0.004;\n\t\tconst numOfSamples = 1 / (cesiumProps.granularity || defaultGranularity);\n\t\tfor (let i = 0; i < numOfSamples + 1; i++) {\n\t\t\tconst currentAngle = cesiumProps.angle + cesiumProps.delta * i / numOfSamples;\n\t\t\tconst distance = cesiumProps.radius / Cesium.Ellipsoid.WGS84.maximumRadius;\n\t\t\tconst curLat = Cesium.Cartographic.fromCartesian(cesiumProps.center).latitude;\n\t\t\tconst curLon = Cesium.Cartographic.fromCartesian(cesiumProps.center).longitude;\n\n\t\t\tconst destinationLat = Math.asin(\n\t\t\t\tMath.sin(curLat) * Math.cos(distance) +\n\t\t\t\tMath.cos(curLat) * Math.sin(distance) * Math.cos(currentAngle)\n\t\t\t);\n\n\t\t\tlet destinationLon = curLon + Math.atan2(Math.sin(currentAngle) * Math.sin(distance) * Math.cos(curLat),\n\t\t\t\t\tMath.cos(distance) - Math.sin(curLat) * Math.sin(destinationLat)\n\t\t\t\t);\n\n\t\t\tdestinationLon = (destinationLon + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\n\n\t\t\tarcPositions.push(Cesium.Cartesian3.fromRadians(destinationLon, destinationLat));\n\t\t}\n\n\t\treturn arcPositions;\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}