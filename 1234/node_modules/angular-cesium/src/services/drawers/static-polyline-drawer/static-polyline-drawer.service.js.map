{"version":3,"file":"static-polyline-drawer.service.js","sourceRoot":"","sources":["static-polyline-drawer.service.ts"],"names":[],"mappings":";;;;;OACO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,aAAa,EAAE,MAAM,6BAA6B;OACpD,EAAE,qBAAqB,EAAE,MAAM,4DAA4D;AAOlG;IAAiD,+CAAqB;IACrE,qCAAY,aAA4B;QACvC,kBAAM,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;IAC/C,CAAC;IAUD,4CAAM,GAAN,UAAO,SAAc,EAAE,aAAkB,EAAE,aAAkB,EAAE,cAAmB;QACjF,IAAM,KAAK,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;QAEnD,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACrB,SAAS,CAAC,6BAA6B,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;QACzD,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;gBACvD,cAAc,CAAC,6BAA6B,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YACpE,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IAClB,CAAC;IACK,sCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,0CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAF6F,CAE7F,CAAC;IACF,kCAAC;AAAD,CAAC,AAlCD,CAAiD,qBAAqB,GAkCrE","sourcesContent":["declare var Cesium;\nimport { Injectable } from '@angular/core';\nimport { CesiumService } from '../../cesium/cesium.service';\nimport { StaticPrimitiveDrawer } from '../static-primitive-drawer/static-primitive-drawer.service';\n\n/**\n *  This drawer is responsible for creating the static version of the polyline component.\n *  This also allows us to change the color of the polylines.\n */\n\nexport class StaticPolylineDrawerService extends StaticPrimitiveDrawer {\n\tconstructor(cesiumService: CesiumService) {\n\t\tsuper(Cesium.PolylineGeometry, cesiumService);\n\t}\n\n\t/**\n\t * Update function can only change the primitive color.\n\t * @param primitive\n\t * @param geometryProps\n\t * @param instanceProps\n\t * @param primitiveProps\n\t * @returns {any}\n\t */\n\tupdate(primitive: any, geometryProps: any, instanceProps: any, primitiveProps: any) {\n\t\tconst color = instanceProps.attributes.color.value;\n\n\t\tif (primitive.ready) {\n\t\t\tprimitive.getGeometryInstanceAttributes().color = color;\n\t\t}\n\t\telse {\n\t\t\tCesium.when(primitive.readyPromise).then((readyPrimitive) => {\n\t\t\t\treadyPrimitive.getGeometryInstanceAttributes().color.value = color;\n\t\t\t});\n\t\t}\n\n\t\treturn primitive;\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}