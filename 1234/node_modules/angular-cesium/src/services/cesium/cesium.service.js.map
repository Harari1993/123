{"version":3,"file":"cesium.service.js","sourceRoot":"","sources":["cesium.service.ts"],"names":[],"mappings":"OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,eAAe;OACrD,EAAE,aAAa,EAAE,MAAM,0CAA0C;OACjE,EAAE,mBAAmB,EAAE,MAAM,sDAAsD;AAM1F;IAGC,uBAAoB,MAAc,EAAU,aAA4B,EAAW,QAA6B;QAA5F,WAAM,GAAN,MAAM,CAAQ;QAAU,kBAAa,GAAb,aAAa,CAAe;QAAW,aAAQ,GAAR,QAAQ,CAAqB;IAChH,CAAC;IAED,4BAAI,GAAJ,UAAK,YAAyB;QAA9B,iBAKC;QAJA,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC7B,IAAM,OAAO,GAAG,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,SAAS,CAAE;YACzE,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACJ,CAAC;IAMD,iCAAS,GAAT;QACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAMD,gCAAQ,GAAR;QACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IAChC,CAAC;IAMD,sCAAc,GAAd;QACC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,CAAC;IACxE,CAAC;IAMD,sCAAc,GAAd,UAAe,MAAc;QAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,GAAG,MAAM,CAAC;IAC1E,CAAC;IAMD,sCAAc,GAAd;QACC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,CAAC;IACxE,CAAC;IAMD,sCAAc,GAAd,UAAe,MAAc;QAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,GAAG,MAAM,CAAC;IAC1E,CAAC;IAMD,qCAAa,GAAb,UAAc,MAAe;QAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,UAAU,GAAG,MAAM,CAAC;IACjE,CAAC;IAOD,iCAAS,GAAT,UAAU,QAAc;QAAd,wBAAc,GAAd,cAAc;QACvB,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAMD,iCAAS,GAAT,UAAU,QAAc;QAAd,wBAAc,GAAd,cAAc;QACvB,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAMD,2CAAmB,GAAnB,UAAoB,QAAc;QAAd,wBAAc,GAAd,cAAc;QACjC,IAAI,CAAC,QAAQ,EAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,6BAAK,GAAL,UAAM,OAAY;QACjB,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACK,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,4BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,MAAM,GAAG;QAChB,EAAC,IAAI,EAAE,aAAa,GAAG;QACvB,EAAC,IAAI,EAAE,mBAAmB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KAC9D,EAJ6F,CAI7F,CAAC;IACF,oBAAC;AAAD,CAAC,AA1GD,IA0GC","sourcesContent":["import { Injectable, NgZone, Optional } from '@angular/core';\nimport { ViewerFactory } from '../viewer-factory/viewer-factory.service';\nimport { ViewerConfiguration } from '../viewer-configuration/viewer-configuration.service';\n\n/**\n *  Service that initialize cesium viewer and expose cesium viewer and scene.\n */\n\nexport class CesiumService {\n\tprivate cesiumViewer: any;\n\n\tconstructor(private ngZone: NgZone, private viewerFactory: ViewerFactory,  private viewConf: ViewerConfiguration) {\n\t}\n\n\tinit(mapContainer: HTMLElement) {\n\t\tthis.ngZone.runOutsideAngular(() => {\n\t\t\tconst options = this.viewConf ? this.viewConf.viewerOptions : undefined ;\n\t\t\tthis.cesiumViewer = this.viewerFactory.createViewer(mapContainer, options);\n\t\t});\n\t}\n\n\t/**\n\t * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewe\n\t * @returns {any}\n\t */\n\tgetViewer() {\n\t\treturn this.cesiumViewer;\n\t}\n\n\t/**\n\t * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Scene.html?classFilter=scene\n\t * @returns {{Scene}|any}\n\t */\n\tgetScene() {\n\t\treturn this.cesiumViewer.scene;\n\t}\n\n\t/**\n\t * Gets the minimum zoom value in meters\n\t * @returns {number}\n\t */\n\tgetMinimumZoom(): number {\n\t\treturn this.getScene().screenSpaceCameraController.minimumZoomDistance;\n\t}\n\n\t/**\n\t * Sets the minimum zoom value in meters\n\t * @param {number} amount\n\t */\n\tsetMinimumZoom(amount: number): void {\n\t\tthis.getScene().screenSpaceCameraController.minimumZoomDistance = amount;\n\t}\n\n\t/**\n\t * Gets the maximum zoom value in meters\n\t * @returns {number}\n\t */\n\tgetMaximumZoom(): number {\n\t\treturn this.getScene().screenSpaceCameraController.maximumZoomDistance;\n\t}\n\n\t/**\n\t * Sets the maximum zoom value in meters\n\t * @param {number} amount\n\t */\n\tsetMaximumZoom(amount: number): void {\n\t\tthis.getScene().screenSpaceCameraController.maximumZoomDistance = amount;\n\t}\n\n\t/**\n\t * Sets the enableTilt of screenSpaceCameraController\n\t * @param {boolean} isTilt\n\t */\n\tsetEnableTilt(isTilt: boolean): void {\n\t\tthis.getScene().screenSpaceCameraController.enableTilt = isTilt;\n\t}\n\n\t/**\n\t * Sets the map to 2D mode.\n\t * @param {number} [2.0] duration - The duration of scene morph animations, in seconds\n\t * Warning: for high performance use Columbus view & turn the tilt off.\n\t */\n\tmorphTo2D(duration = 2.0) {\n\t\tthis.getScene().morphTo2D(duration);\n\t}\n\n\t/**\n\t * Sets the map to 3D mode.\n\t * @param {number} [2.0] duration - The duration of scene morph animations, in seconds\n\t */\n\tmorphTo3D(duration = 2.0) {\n\t\tthis.getScene().morphTo3D(duration);\n\t}\n\n\t/**\n\t * Sets the map to Columbus view mode.\n\t * @param {number} [2.0] duration - The duration of scene morph animations, in seconds\n\t */\n\tmorphToColumbusView(duration = 2.0) {\n\t\tthis.getScene().morphToColumbusView(duration);\n\t}\n\n\tflyTo(options: any) {\n\t\tthis.getViewer().camera.flyTo(options);\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ViewerFactory, },\n{type: ViewerConfiguration, decorators: [{ type: Optional }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}