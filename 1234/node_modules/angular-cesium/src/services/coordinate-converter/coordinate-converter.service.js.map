{"version":3,"file":"coordinate-converter.service.js","sourceRoot":"","sources":["coordinate-converter.service.ts"],"names":[],"mappings":"OACO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe;OAC7C,EAAE,aAAa,EAAE,MAAM,0BAA0B;AAExD,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AACxB,IAAM,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;AA0BpD;IACC,6BAAqB,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IAClD,CAAC;IAED,gDAAkB,GAAlB,UAAmB,SAAiC;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,iGAAiG,CAAC,CAAC;QACpH,CAAC;QACD,IAAI,CAAC,CAAC;YACL,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;YAErD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACxC,CAAC;IACF,CAAC;IAED,kDAAoB,GAApB,UAAqB,SAAiC,EAAE,SAAe;QACtE,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;IACrF,CAAC;IAED,sDAAwB,GAAxB,UAAyB,SAAS,EAAE,SAAe;QAClD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC;IAED,mDAAqB,GAArB,UAAsB,SAAiB,EAAE,QAAgB,EAAE,MAAe;QACzE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACrE,CAAC;IAED,mDAAqB,GAArB,UAAsB,SAAiB,EAAE,QAAgB,EAAE,MAAe;QACzE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACrE,CAAC;IAED,0CAAY,GAAZ,UAAa,SAAiB,EAAE,QAAgB,EAAE,MAAe;QAChE,MAAM,CAAC,IAAI,iBAAiB,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;IAC9E,CAAC;IAED,0CAAY,GAAZ,UAAa,IAAY,EAAE,UAAkB,EAAE,OAAe,EAAE,QAAgB;QAC/E,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC7F,CAAC;IAEO,mDAAqB,GAA7B,UAA8B,cAAc;QAC3C,MAAM,CAAC;YACN,SAAS,EAAE,cAAc,CAAC,GAAG;YAC7B,QAAQ,EAAE,cAAc,CAAC,GAAG;YAC5B,MAAM,EAAE,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC;SACzD,CAAC;IACH,CAAC;IACK,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,kCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KACxD,EAF6F,CAE7F,CAAC;IACF,0BAAC;AAAD,CAAC,AArDD,IAqDC","sourcesContent":["declare var Cesium;\nimport { Injectable, Optional } from '@angular/core';\nimport { CesiumService } from '../cesium/cesium.service';\n\nconst geodesy = require('geodesy');\nconst UTM = geodesy.Utm;\nconst LatLonEllipsoidal = geodesy.LatLonEllipsoidal;\n\n/**\n *  Given different types of coordinates, we provide you a service converting those types to the most common other types.\n *  We are using the geodesy implementation of UTM conversion. see: https://github.com/chrisveness/geodesy.\n *  @example\n *   import { Component, OnInit } from '@angular/core';\n import { CoordinateConverter } from 'angular2-cesium';\n\n @Component({\n\t\tselector:'my-component',\n\t\ttemplate:'<div>{{showCartographic}}</div>',\n\t\tproviders:[CoordinateConverter]\n\t})\n export class MyComponent implements OnInit {\n\t\tshowCartographic;\n\n\t\tconstructor(private coordinateConverter:CoordinateConverter){\n\t\t}\n\n\t\tngOnInit(){\n\t\t\tthis.showCartographic = this.coordinateConverter.degreesToCartographic(5, 5, 5);\n\t\t}\n\t}\n */\n\nexport class CoordinateConverter {\n\tconstructor( private cesiumService?: CesiumService) {\n\t}\n\n\tscreenToCartesian3(screenPos: {x: number, y: number}) {\n\t\tif (!this.cesiumService) {\n\t\t\tthrow new Error('ANGULAR2-CESIUM - Cesium service should be provided in order to do screen position calculations');\n\t\t}\n\t\telse {\n\t\t\tconst camera = this.cesiumService.getViewer().camera;\n\n\t\t\treturn camera.pickEllipsoid(screenPos);\n\t\t}\n\t}\n\n\tscreenToCartographic(screenPos: {x: number, y: number}, ellipsoid?: any) {\n\t\treturn this.cartesian3ToCartographic(this.screenToCartesian3(screenPos), ellipsoid);\n\t}\n\n\tcartesian3ToCartographic(cartesian, ellipsoid?: any) {\n\t\treturn Cesium.Cartographic.fromCartesian(cartesian, ellipsoid);\n\t}\n\n\tdegreesToCartographic(longitude: number, latitude: number, height?: number) {\n\t\treturn Cesium.Cartographic.fromDegrees(longitude, latitude, height);\n\t}\n\n\tradiansToCartographic(longitude: number, latitude: number, height?: number) {\n\t\treturn Cesium.Cartographic.fromRadians(longitude, latitude, height);\n\t}\n\n\tdegreesToUTM(longitude: number, latitude: number, height?: number) {\n\t\treturn new LatLonEllipsoidal(latitude, longitude, undefined, height).toUtm();\n\t}\n\n\tUTMToDegrees(zone: number, hemisphere: string, easting: number, northing: number) {\n\t\treturn this.geodesyToCesiumObject(new UTM(zone, hemisphere, easting, northing).toLatLonE());\n\t}\n\n\tprivate geodesyToCesiumObject(geodesyRadians) {\n\t\treturn {\n\t\t\tlongitude: geodesyRadians.lon,\n\t\t\tlatitude: geodesyRadians.lat,\n\t\t\theight: geodesyRadians.height ? geodesyRadians.height : 0\n\t\t};\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, decorators: [{ type: Optional }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}