"use strict";
var MethodStubCollection_1 = require("./MethodStubCollection");
var MethodToStub_1 = require("./MethodToStub");
var Matcher_1 = require("./matcher/type/Matcher");
var MethodAction_1 = require("./MethodAction");
var ReturnValueMethodStub_1 = require("./stub/ReturnValueMethodStub");
var RedundantMethodNameInCodeFinder_1 = require("./utils/RedundantMethodNameInCodeFinder");
var ts_mockito_1 = require("./ts-mockito");
var PrototypeKeyCodeGetter_1 = require("./utils/PrototypeKeyCodeGetter");
var Mocker = (function () {
    function Mocker(clazz) {
        this.clazz = clazz;
        this.methodStubCollections = {};
        this.methodActions = [];
        this.mock = {};
        this.instance = {};
        this.redundantMethodNameInCodeFinder = new RedundantMethodNameInCodeFinder_1.RedundantMethodNameInCodeFinder();
        this.subKeysInCodeFinder = new PrototypeKeyCodeGetter_1.PrototypeKeyCodeGetter();
        this.mock.__tsmockitoInstance = this.instance;
        this.mock.__tsmockitoMocker = this;
        this.createMethodStubsFromPrototypeOwnPropertyNames();
        this.createMethodStubsFromPrototypeKeys();
        this.createMethodStubsFromClassCode();
        this.createMethodStubsFromFunctionsCode();
        this.createInstanceActionListenersFromPrototypeOwnPropertyNames();
        this.createInstanceActionListenersFromPrototypeKeys();
        this.createInstanceActionListenersFromClassCode();
        this.createInstanceActionListenersFromFunctionsCode();
    }
    Mocker.prototype.getMock = function () {
        return this.mock;
    };
    Mocker.prototype.reset = function () {
        this.methodStubCollections = {};
        this.methodActions = [];
    };
    Mocker.prototype.resetCalls = function () {
        this.methodActions = [];
    };
    Mocker.prototype.getAllMatchingActions = function (methodName, matchers) {
        var result = [];
        for (var _i = 0, _a = this.methodActions; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.isApplicable(methodName, matchers)) {
                result.push(item);
            }
        }
        return result;
    };
    Mocker.prototype.getFirstMatchingAction = function (methodName, matchers) {
        return this.getAllMatchingActions(methodName, matchers)[0];
    };
    Mocker.prototype.createMethodStubsFromPrototypeOwnPropertyNames = function () {
        try {
            var names = Object.getOwnPropertyNames(this.clazz.prototype);
            for (var i = 0; i < names.length; i++) {
                this.createMethodStub(names[i]);
            }
        }
        catch (error) {
        }
    };
    Mocker.prototype.createMethodStubsFromPrototypeKeys = function () {
        for (var key in this.clazz.prototype) {
            this.createMethodStub(key);
        }
    };
    Mocker.prototype.createMethodStubsFromClassCode = function () {
        var subKeys = this.redundantMethodNameInCodeFinder.find(this.clazz.toString());
        for (var subKey in subKeys) {
            this.createMethodStub(subKey);
        }
    };
    Mocker.prototype.createMethodStubsFromFunctionsCode = function () {
        for (var key in this.clazz.prototype) {
            var subKeys = this.redundantMethodNameInCodeFinder.find(this.subKeysInCodeFinder.get(this.clazz.prototype, key));
            for (var subKey in subKeys) {
                this.createMethodStub(subKey);
            }
        }
    };
    Mocker.prototype.createMethodStub = function (key) {
        var _this = this;
        if (this.mock[key]) {
            return;
        }
        this.mock[key] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!_this.methodStubCollections[key]) {
                _this.methodStubCollections[key] = new MethodStubCollection_1.MethodStubCollection();
            }
            var matchers = [];
            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
                var arg = args_1[_a];
                if (!(arg instanceof Matcher_1.Matcher)) {
                    matchers.push(ts_mockito_1.strictEqual(arg));
                }
                else {
                    matchers.push(arg);
                }
            }
            return new MethodToStub_1.MethodToStub(_this.methodStubCollections[key], matchers, _this, key);
        };
    };
    Mocker.prototype.createInstanceActionListenersFromPrototypeOwnPropertyNames = function () {
        try {
            var names = Object.getOwnPropertyNames(this.clazz.prototype);
            for (var i = 0; i < names.length; i++) {
                this.createInstanceActionListener(names[i]);
            }
        }
        catch (error) {
        }
    };
    Mocker.prototype.createInstanceActionListenersFromPrototypeKeys = function () {
        for (var key in this.clazz.prototype) {
            this.createInstanceActionListener(key);
        }
    };
    Mocker.prototype.createInstanceActionListenersFromClassCode = function () {
        var subKeys = this.redundantMethodNameInCodeFinder.find(this.clazz.toString());
        for (var subKey in subKeys) {
            this.createInstanceActionListener(subKey);
        }
    };
    Mocker.prototype.createInstanceActionListenersFromFunctionsCode = function () {
        for (var key in this.clazz.prototype) {
            var subKeys = this.redundantMethodNameInCodeFinder.find(this.subKeysInCodeFinder.get(this.clazz.prototype, key));
            for (var subKey in subKeys) {
                this.createInstanceActionListener(subKey);
            }
        }
    };
    Mocker.prototype.createInstanceActionListener = function (key) {
        var _this = this;
        if (this.instance[key]) {
            return;
        }
        this.instance[key] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var action = new MethodAction_1.MethodAction(key, args);
            _this.methodActions.push(action);
            var methodStub = _this.getMethodStub(key, args);
            methodStub.execute(args);
            return methodStub.getValue();
        };
    };
    Mocker.prototype.getMethodStub = function (key, args) {
        var methodStub = this.methodStubCollections[key];
        if (!methodStub) {
            return new ReturnValueMethodStub_1.ReturnValueMethodStub([], null);
        }
        else if (methodStub.getHadMoreThanOneBehavior() && methodStub.hasMatching(args)) {
            return methodStub.getFirstMatchingAndRemove(args);
        }
        else if (methodStub.hasMatching(args)) {
            return methodStub.getFirstMatching(args);
        }
        else {
            return new ReturnValueMethodStub_1.ReturnValueMethodStub([], null);
        }
    };
    return Mocker;
}());
exports.Mocker = Mocker;
//# sourceMappingURL=Mock.js.map