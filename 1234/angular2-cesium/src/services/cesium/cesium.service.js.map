{"version":3,"file":"cesium.service.js","sourceRoot":"","sources":["cesium.service.ts"],"names":[],"mappings":"OACO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe;OAC3C,EAAE,aAAa,EAAE,MAAM,0CAA0C;AAMxE;IAGC,uBAAoB,MAAc,EAAU,aAA4B;QAApD,WAAM,GAAN,MAAM,CAAQ;QAAU,kBAAa,GAAb,aAAa,CAAe;IACxE,CAAC;IAED,4BAAI,GAAJ,UAAK,YAAyB;QAA9B,iBAIC;QAHA,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC7B,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACJ,CAAC;IAMD,iCAAS,GAAT;QACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAMD,gCAAQ,GAAR;QACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IAChC,CAAC;IAMD,sCAAc,GAAd;QACC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,CAAC;IACxE,CAAC;IAMD,sCAAc,GAAd,UAAe,MAAc;QAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,GAAG,MAAM,CAAC;IAC1E,CAAC;IAMD,sCAAc,GAAd;QACC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,CAAC;IACxE,CAAC;IAMD,sCAAc,GAAd,UAAe,MAAc;QAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,GAAG,MAAM,CAAC;IAC1E,CAAC;IAMD,qCAAa,GAAb,UAAc,MAAe;QAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,CAAC,UAAU,GAAG,MAAM,CAAC;IACjE,CAAC;IAOD,iCAAS,GAAT,UAAU,QAAc;QAAd,wBAAc,GAAd,cAAc;QACvB,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAMD,iCAAS,GAAT,UAAU,QAAc;QAAd,wBAAc,GAAd,cAAc;QACvB,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAMD,2CAAmB,GAAnB,UAAoB,QAAc;QAAd,wBAAc,GAAd,cAAc;QACjC,IAAI,CAAC,QAAQ,EAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IACK,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,4BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,MAAM,GAAG;QAChB,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAH6F,CAG7F,CAAC;IACF,oBAAC;AAAD,CAAC,AApGD,IAoGC","sourcesContent":["declare var Cesium;\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { ViewerFactory } from '../viewer-factory/viewer-factory.service';\r\n\r\n/**\r\n *  Service that initialize cesium viewer and expose cesium viewer and scene.\r\n */\r\n\r\nexport class CesiumService {\r\n\tprivate cesiumViewer: any;\r\n\r\n\tconstructor(private ngZone: NgZone, private viewerFactory: ViewerFactory) {\r\n\t}\r\n\r\n\tinit(mapContainer: HTMLElement) {\r\n\t\tthis.ngZone.runOutsideAngular(() => {\r\n\t\t\tthis.cesiumViewer = this.viewerFactory.createViewer(mapContainer);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewe\r\n\t * @returns {any}\r\n\t */\r\n\tgetViewer() {\r\n\t\treturn this.cesiumViewer;\r\n\t}\r\n\r\n\t/**\r\n\t * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Scene.html?classFilter=scene\r\n\t * @returns {{Scene}|any}\r\n\t */\r\n\tgetScene() {\r\n\t\treturn this.cesiumViewer.scene;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the minimum zoom value in meters\r\n\t * @returns {number}\r\n\t */\r\n\tgetMinimumZoom(): number {\r\n\t\treturn this.getScene().screenSpaceCameraController.minimumZoomDistance;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the minimum zoom value in meters\r\n\t * @param {number} amount\r\n\t */\r\n\tsetMinimumZoom(amount: number): void {\r\n\t\tthis.getScene().screenSpaceCameraController.minimumZoomDistance = amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the maximum zoom value in meters\r\n\t * @returns {number}\r\n\t */\r\n\tgetMaximumZoom(): number {\r\n\t\treturn this.getScene().screenSpaceCameraController.maximumZoomDistance;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the maximum zoom value in meters\r\n\t * @param {number} amount\r\n\t */\r\n\tsetMaximumZoom(amount: number): void {\r\n\t\tthis.getScene().screenSpaceCameraController.maximumZoomDistance = amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the enableTilt of screenSpaceCameraController\r\n\t * @param {boolean} isTilt\r\n\t */\r\n\tsetEnableTilt(isTilt: boolean): void {\r\n\t\tthis.getScene().screenSpaceCameraController.enableTilt = isTilt;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the map to 2D mode.\r\n\t * @param {number} [2.0] duration - The duration of scene morph animations, in seconds\r\n\t * Warning: for high performance use Columbus view & turn the tilt off.\r\n\t */\r\n\tmorphTo2D(duration = 2.0) {\r\n\t\tthis.getScene().morphTo2D(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the map to 3D mode.\r\n\t * @param {number} [2.0] duration - The duration of scene morph animations, in seconds\r\n\t */\r\n\tmorphTo3D(duration = 2.0) {\r\n\t\tthis.getScene().morphTo3D(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the map to Columbus view mode.\r\n\t * @param {number} [2.0] duration - The duration of scene morph animations, in seconds\r\n\t */\r\n\tmorphToColumbusView(duration = 2.0) {\r\n\t\tthis.getScene().morphToColumbusView(duration);\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ViewerFactory, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}