{"version":3,"file":"dynamic-ellipse-drawer.service.js","sourceRoot":"","sources":["dynamic-ellipse-drawer.service.ts"],"names":[],"mappings":";;;;;OACO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,mBAAmB,EAAE,MAAM,wCAAwC;OACrE,EAAE,aAAa,EAAE,MAAM,0BAA0B;OACjD,EAAE,OAAO,EAAE,MAAM,qBAAqB;OACtC,EAAE,gBAAgB,EAAE,MAAM,sBAAsB;AAUvD;IAAiD,+CAAmB;IACnE,qCAAY,aAA4B;QACvC,kBAAM,MAAM,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;IAED,yCAAG,GAAH,UAAI,WAAgB;QACnB,OAAO,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,eAAe,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC,CAAC;QAEpG,MAAM,CAAC,gBAAK,CAAC,GAAG,YAAC,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,4CAAM,GAAN,UAAO,OAAY,EAAE,WAAgB;QACpC,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAExC,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IACK,sCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,0CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAF6F,CAE7F,CAAC;IACF,kCAAC;AAAD,CAAC,AAvBD,CAAiD,mBAAmB,GAuBnE","sourcesContent":["declare var Cesium;\r\nimport { Injectable } from '@angular/core';\r\nimport { SimpleDrawerService } from '../simple-drawer/simple-drawer.service';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\nimport { Checker } from '../../utils/checker';\r\nimport { EllipsePrimitive } from 'primitive-primitives';\r\n\r\n\r\n/**\r\n *  This drawer is responsible for creating the dynamic version of the ellipse component.\r\n *  We are using the primitive-primitives implementation of an ellipse. see: https://github.com/gotenxds/Primitive-primitives\r\n *  This allows us to change the position of the ellipses without creating a new primitive object\r\n *  as Cesium does not allow updating an ellipse.\r\n */\r\n\r\nexport class DynamicEllipseDrawerService extends SimpleDrawerService {\r\n\tconstructor(cesiumService: CesiumService) {\r\n\t\tsuper(Cesium.PrimitiveCollection, cesiumService);\r\n\t}\r\n\r\n\tadd(cesiumProps: any): any {\r\n\t\tChecker.throwIfAnyNotPresent(cesiumProps, ['center', 'semiMajorAxis', 'semiMinorAxis', 'rotation']);\r\n\r\n\t\treturn super.add(new EllipsePrimitive(cesiumProps));\r\n\t}\r\n\r\n\tupdate(ellipse: any, cesiumProps: any): any {\r\n\t\tellipse.updateLocationData(cesiumProps);\r\n\r\n\t\treturn ellipse;\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}