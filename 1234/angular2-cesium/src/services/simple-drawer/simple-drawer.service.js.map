{"version":3,"file":"simple-drawer.service.js","sourceRoot":"","sources":["simple-drawer.service.ts"],"names":[],"mappings":"AAKA;IAMC,6BAAY,UAAe,EAAE,aAA4B;QAL/C,aAAQ,GAAG,IAAI,CAAC;QAMzB,IAAI,CAAC,iBAAiB,GAAG,IAAI,UAAU,EAAE,CAAC;QAC1C,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACjE,CAAC;IAED,8CAAgB,GAAhB,UAAiB,QAAkB;QAClC,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;IAChC,CAAC;IAED,iCAAG,GAAH,UAAI,WAAgB;QAAE,mBAAY;aAAZ,WAAY,CAAZ,sBAAY,CAAZ,IAAY;YAAZ,kCAAY;;QAEjC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAED,oCAAM,GAAN,UAAO,SAAc,EAAE,WAAmB;QAAE,mBAAY;aAAZ,WAAY,CAAZ,sBAAY,CAAZ,IAAY;YAAZ,kCAAY;;QACvD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACvC,CAAC;IACF,CAAC;IAED,oCAAM,GAAN,UAAO,SAAc;QACpB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAED,uCAAS,GAAT;QACC,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC;IACpC,CAAC;IAED,qCAAO,GAAP,UAAQ,SAAkB;QACzB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxD,IAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAChD,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC;QAC5B,CAAC;IACF,CAAC;IACF,0BAAC;AAAD,CAAC,AA7CD,IA6CC","sourcesContent":["import { CesiumService } from '../cesium/cesium.service';\r\n\r\n/**\r\n *  This is abstract drawer who provides some implementation for other drawers that extends it.\r\n */\r\nexport abstract class SimpleDrawerService {\r\n\tprotected _showAll = true;\r\n\r\n\tprivate _cesiumCollection: any;\r\n\tprivate _propsAssigner: Function;\r\n\r\n\tconstructor(drawerType: any, cesiumService: CesiumService) {\r\n\t\tthis._cesiumCollection = new drawerType();\r\n\t\tcesiumService.getScene().primitives.add(this._cesiumCollection);\r\n\t}\r\n\r\n\tsetPropsAssigner(assigner: Function) {\r\n\t\tthis._propsAssigner = assigner;\r\n\t}\r\n\r\n\tadd(cesiumProps: any, ...moreProps): any {\r\n\t\t// Todo: Take care of show = false\r\n\t\tcesiumProps.show = this._showAll;\r\n\t\treturn this._cesiumCollection.add(cesiumProps);\r\n\t}\r\n\r\n\tupdate(primitive: any, cesiumProps: Object, ...moreProps) {\r\n\t\tif (this._propsAssigner) {\r\n\t\t\tthis._propsAssigner(primitive, cesiumProps);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tObject.assign(primitive, cesiumProps);\r\n\t\t}\r\n\t}\r\n\r\n\tremove(primitive: any) {\r\n\t\tthis._cesiumCollection.remove(primitive);\r\n\t}\r\n\r\n\tremoveAll() {\r\n\t\tthis._cesiumCollection.removeAll();\r\n\t}\r\n\r\n\tsetShow(showValue: boolean) {\r\n\t\tthis._showAll = showValue;\r\n\t\tfor (let i = 0; i < this._cesiumCollection.length; i++) {\r\n\t\t\tconst primitive = this._cesiumCollection.get(i);\r\n\t\t\tprimitive.show = showValue;\r\n\t\t}\r\n\t}\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}