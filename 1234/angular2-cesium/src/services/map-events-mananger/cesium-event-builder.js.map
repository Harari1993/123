{"version":3,"file":"cesium-event-builder.js","sourceRoot":"","sources":["cesium-event-builder.ts"],"names":[],"mappings":"OACO,EAAE,aAAa,EAAE,MAAM,0BAA0B;OACjD,EAAE,WAAW,EAAE,MAAM,4BAA4B;OAEjD,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,uBAAuB,EAAE,MAAM,8BAA8B;OAC/D,EAAE,uBAAuB,EAAE,MAAM,8BAA8B;AAGtE;IAUC,4BAAY,aAA4B;QAFhC,4BAAuB,GAAG,IAAI,GAAG,EAAsC,CAAC;QAG/E,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC,uBAAuB,CAAC;IACxE,CAAC;IAED,gCAAG,GAAH,UAAI,KAAkB,EAAE,QAAyC;QAAzC,wBAAyC,GAAzC,oBAAyC;QAChE,IAAM,SAAS,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACvE,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAM,aAAa,GAAG,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACxE,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC3D,MAAM,CAAC,aAAa,CAAC;QACtB,CAAC;IACF,CAAC;IAEa,mCAAgB,GAA9B,UAA+B,KAAkB,EAAE,QAA8B;QAChF,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAI,KAAK,SAAI,QAAU,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC;IACF,CAAC;IAEO,wDAA2B,GAAnC,UAAoC,KAAkB,EAAE,QAA8B;QACrF,IAAI,qBAAqB,GAA+B,SAAS,CAAC;QAClE,EAAE,CAAC,CAAC,kBAAkB,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnD,qBAAqB,GAAG,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAClF,CAAC;QACD,IAAI,CAAC,CAAC;YACL,qBAAqB,GAAG,IAAI,uBAAuB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,CAAC;QACzG,CAAC;QACD,qBAAqB,CAAC,OAAO,EAAE,CAAC;QAChC,MAAM,CAAC,qBAAqB,CAAC;IAC9B,CAAC;IAEO,+DAAkC,GAA1C,UAA2C,KAAkB,EAAE,QAA6B;QAE3F,MAAM,CAAC,IAAI,uBAAuB,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;IAClE,CAAC;IAhDa,kCAAe,GAAqB,IAAI,GAAG,CAAC;QACzD,WAAW,CAAC,eAAe;QAC3B,WAAW,CAAC,gBAAgB;QAC5B,WAAW,CAAC,iBAAiB;KAC7B,CAAC,CAAC;IA6CG,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,iCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAF6F,CAE7F,CAAC;IACF,yBAAC;AAAD,CAAC,AAzDD,IAyDC","sourcesContent":["import { Observable, ConnectableObservable } from 'rxjs';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\nimport { CesiumEvent } from './consts/cesium-event.enum';\r\nimport { CesiumEventModifier } from './consts/cesium-event-modifier.enum';\r\nimport { Injectable } from '@angular/core';\r\nimport { CesiumPureEventObserver } from './cesium-pure-event-observer';\r\nimport { CesiumLongPressObserver } from './cesium-long-press-observer';\r\n\r\n\r\nexport class CesiumEventBuilder {\r\n\tpublic static longPressEvents: Set<CesiumEvent> = new Set([\r\n\t\tCesiumEvent.LONG_LEFT_PRESS,\r\n\t\tCesiumEvent.LONG_RIGHT_PRESS,\r\n\t\tCesiumEvent.LONG_MIDDLE_PRESS\r\n\t]);\r\n\r\n\tprivate eventsHandler: any;\r\n\tprivate cesiumEventsObservables = new Map<string, ConnectableObservable<any>>();\r\n\r\n\tconstructor(cesiumService: CesiumService) {\r\n\t\tthis.eventsHandler = cesiumService.getViewer().screenSpaceEventHandler;\r\n\t}\r\n\r\n\tget(event: CesiumEvent, modifier: CesiumEventModifier = undefined): ConnectableObservable<any> {\r\n\t\tconst eventName = CesiumEventBuilder.getEventFullName(event, modifier);\r\n\t\tif (this.cesiumEventsObservables.has(eventName)) {\r\n\t\t\treturn this.cesiumEventsObservables.get(eventName);\r\n\t\t} else {\r\n\t\t\tconst eventObserver = this.createCesiumEventObservable(event, modifier);\r\n\t\t\tthis.cesiumEventsObservables.set(eventName, eventObserver);\r\n\t\t\treturn eventObserver;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static getEventFullName(event: CesiumEvent, modifier?: CesiumEventModifier): string {\r\n\t\tif (modifier) {\r\n\t\t\treturn `${event}_${modifier}`;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn event.toString();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createCesiumEventObservable(event: CesiumEvent, modifier?: CesiumEventModifier): ConnectableObservable<any> {\r\n\t\tlet cesiumEventObservable: ConnectableObservable<any> = undefined;\r\n\t\tif (CesiumEventBuilder.longPressEvents.has(event)) {\r\n\t\t\tcesiumEventObservable = this.createSpecialCesiumEventObservable(event, modifier);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcesiumEventObservable = new CesiumPureEventObserver(event, modifier).init(this.eventsHandler).publish();\r\n\t\t}\r\n\t\tcesiumEventObservable.connect();\r\n\t\treturn cesiumEventObservable;\r\n\t}\r\n\r\n\tprivate createSpecialCesiumEventObservable(event: CesiumEvent, modifier: CesiumEventModifier): ConnectableObservable<any> {\r\n\t\t// could support more events if needed\r\n\t\treturn new CesiumLongPressObserver(event, modifier, this).init();\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}