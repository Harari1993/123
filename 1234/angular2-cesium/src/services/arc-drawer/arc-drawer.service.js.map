{"version":3,"file":"arc-drawer.service.js","sourceRoot":"","sources":["arc-drawer.service.ts"],"names":[],"mappings":"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","sourcesContent":["declare var Cesium;\r\nimport { Injectable } from '@angular/core';\r\nimport { SimpleDrawerService } from '../simple-drawer/simple-drawer.service';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\n\r\n/**\r\n  +  This drawer is responsible for drawing an arc over the Cesium map.\r\n  +  This implementation uses simple PolylineGeometry and Primitive parameters.\r\n  +  This doesn't allow us to change the position, color, etc.. of the arc but show only.\r\n  */\r\n\r\n\r\nexport class ArcDrawerService extends SimpleDrawerService {\r\n\tconstructor(cesiumService: CesiumService) {\r\n\t\tsuper(Cesium.PrimitiveCollection, cesiumService);\r\n\t}\r\n\r\n\tadd(cesiumProps: any) {\r\n\t\tlet arcPositions = this.generatePositions(cesiumProps);\r\n\t\tlet colorMaterial = Cesium.Material.fromType('Color');\r\n\t\tcolorMaterial.uniforms.color = cesiumProps.color || Cesium.Color.WHITE;\r\n\t\treturn super.add(new Cesium.Primitive({\r\n\t\t\tgeometryInstances: new Cesium.GeometryInstance({\r\n\t\t\t\tgeometry: new Cesium.PolylineGeometry({\r\n\t\t\t\t\tpositions: arcPositions\r\n\t\t\t\t})\r\n\t\t\t}),\r\n\t\t\tappearance: new Cesium.PolylineMaterialAppearance({\r\n\t\t\t\tmaterial: colorMaterial\r\n\t\t\t})\r\n\t\t}));\r\n\t}\r\n\r\n\tprivate generatePositions(cesiumProps: any): Array<any> {\r\n\t\tlet arcPositions = [];\r\n\t\tconst defaultGranularity = 0.004;\r\n\t\tlet numOfSamples = 1 / (cesiumProps.granularity || defaultGranularity);\r\n\t\tfor (let i = 0; i < numOfSamples + 1; i++) {\r\n\t\t\tlet currentAngle = cesiumProps.angle + cesiumProps.delta * i / numOfSamples;\r\n\t\t\tlet distance = cesiumProps.radius / Cesium.Ellipsoid.WGS84.maximumRadius;\r\n\t\t\tlet curLat = Cesium.Cartographic.fromCartesian(cesiumProps.center).latitude;\r\n\t\t\tlet curLon = Cesium.Cartographic.fromCartesian(cesiumProps.center).longitude;\r\n\r\n\t\t\tlet destinationLat = Math.asin(\r\n\t\t\t\tMath.sin(curLat) * Math.cos(distance) +\r\n\t\t\t\tMath.cos(curLat) * Math.sin(distance) * Math.cos(currentAngle)\r\n\t\t\t);\r\n\r\n\t\t\tlet destinationLon = curLon + Math.atan2(Math.sin(currentAngle) * Math.sin(distance) * Math.cos(curLat),\r\n\t\t\t\t\tMath.cos(distance) - Math.sin(curLat) * Math.sin(destinationLat)\r\n\t\t\t\t);\r\n\r\n\t\t\tdestinationLon = (destinationLon + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\r\n\r\n\t\t\tarcPositions.push(Cesium.Cartesian3.fromRadians(destinationLon, destinationLat));\r\n\t\t}\r\n\r\n\t\treturn arcPositions;\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}